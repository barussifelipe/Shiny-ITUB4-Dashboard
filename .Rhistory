head(seg.raw)
seg.df  <- seg.raw[ , -7]     # remove the known segment assignments
head(seg.df)
#We create a simple function to look at mean values by group.
#(This is a placeholder for a more complex evaluation of an interpretable business outcome.)
seg.summ <- function(data, groups) {
aggregate(data, list(groups), function(x) mean(as.numeric(x)))
}
seg.summ(seg.df, seg.raw$Segment)
#dist() computes Euclidian distance:
sqrt(sum((c(1,2,3) - c(2,3,2))^2))
dist(rbind(c(1,2,3), c(2,3,2)))
#In case of mixed data types (e.g., continuous, binary, ordinal),
#dist() may not be appropriate because of the huge implied scale differences.
#daisy() is an alternative that automatically rescales.
library(cluster)
seg.dist <- daisy(seg.df)       # daisy works with mixed data types
install.packages("igraph")
library(igraph)
g1 <- graph(edges=c(1,2, 2,3, 3,1), n=3, directed=F)
g1
g2 <- graph( edges=c(1,2, 2,3, 3,1, 4,1, 10,1), n=10 , directed = F)
plot(g2)
g1 <- graph(edges=c(1,2, 2,3, 3,1), n=3, directed=F)
g2 <- graph( edges=c(1,2, 2,3, 3,1, 4,1, 10,1), n=10 , directed = F)
plot(g2)
g3 <- graph( c("John", "Jim", "Jim", "Jill", "Jill", "John")) # named vertices
# When the edge list has vertex names, the number of nodes is not needed
plot(g3)
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
# In named graphs we can specify isolates by providing a list of their names.
plot(g4)
plot(g4, edge.arrow.size=.5, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1.5, vertex.label.dist=2, edge.curved=0.2)
plot(g4, edge.arrow.size=.5, vertex.color=V(g4)$color, vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1.5, vertex.label.dist=2, edge.curved=0.2)
g4 <- set_graph_attr(g4, "name", "Email Network")
g4 <- set_graph_attr(g4, "Collection Year", "2000")
graph_attr_names(g4)
## [1] "name"            "Collection Year"
g4 <- delete_graph_attr(g4, "Collection Year")
graph_attr(g4)
## $name
## [1] "Email Network"
# similarly we can use set_edge_attr() and set_vertex_attr()
g4 <- set_vertex_attr(g4,"color",value=c("skyblue", "skyblue", "skyblue", "skyblue",
"bisque", "bisque", "skyblue"))
plot(g4, edge.arrow.size=.5, vertex.color=V(g4)$color, vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1.5, vertex.label.dist=2, edge.curved=0.2)
watts.strogatz.game()
watts.strogatz.game(100)
watts.strogatz.game(100, 100)
watts.strogatz.game(100, 100, 10)
watts.strogatz.game(100, 100, 10, p = 0.01)
watts.strogatz.game(10, 10, 10, p = 0.01)
watts.strogatz.game(2, 2, 3, p = 0.01)
a = watts.strogatz.game(2, 2, 3, p = 0.01)
plot(a)
a = watts.strogatz.game(2, 4, 4, p = 0.01)
plot(a)
setwd(~/Documents/Programming/Shiny_Dashboard_ITUB4)
setwd(~Documents/Programming/Shiny_Dashboard_ITUB4)
setwd("~Documents/Programming/Shiny_Dashboard_ITUB4")
setwd("~/Documents/Programming/Shiny_Dashboard_ITUB4")
source("~/.active-rstudio-document")
ativos = read.csv("data/ativos.csv")
dre = read.csv("data/DRE.csv")
passivo = read.csv("data/passivo.csv")
ativos
View(ativos)
library(shiny)
library(shinydashboard)
library(dplyr)
ativos = ativos %>%
mutate(index = coalesce(ativos[, 1], ativos[, 2], ativos[, 3]))
View(ativos)
ativos = read.csv("data/ativos.csv")
ativos$X = ifelse(!is.na(ativos[, 1]), ativos[, 1], ifelse(!is.na(ativos[, 2]), ativos[, 2], ativos[, 3]))
View(ativos)
ativos$X
ativos$X = ifelse(ativos[, 1] != "", ativos[, 1], ifelse(ativos[, 2] != "", ativos[, 2], ativos[, 3]))
ativos$X
View(ativos)
ativos = ativos[, -c(2, 3)]
View(ativos)
View(dre)
merge_columns <- function(df) {
df$X <- ifelse(df[, 1] != "", df[, 1], ifelse(df[, 2] != "", df[, 2], df[, 3]))
df <- df[, -c(2, 3)]
return(df)
}
ativos = merge_columns(ativos)
dre = merge_columns(dre)
passivo = merge_columns(passivo)
View(ativos)
View(dre)
dre
View(passivo)
View(dre)
ativos
read.csv("data/ativos.csv")
ativos = read.csv("data/ativos.csv")
dre = read.csv("data/DRE.csv")
passivo = read.csv("data/passivo.csv")
#First, cleanup the ativos data,  I need to merge the data of the three first column, in order to have all blank
#spaces filled.
#Create a function for this
merge_columns <- function(df) {
df$X <- ifelse(df[, 1] != "", df[, 1], ifelse(df[, 2] != "", df[, 2], df[, 3]))
df <- df[, -c(2, 3)]
return(df)
}
ativos = merge_columns(ativos)
View(ativos)
dre = merge_columns(dre)
passivo = merge_columns(passivo)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar")),
)
),
dashboardBody()
)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar")),
)),
dashboardBody()
)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "a", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar")),
)),
dashboardBody()
)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar")),
)),
dashboardBody()
)
setwd("~/Documents/Programming/Shiny_Dashboard_ITUB4")
library(shiny)
library(shinydashboard)
library(dplyr)
ativos = read.csv("data/ativos.csv")
dre = read.csv("data/DRE.csv")
passivo = read.csv("data/passivo.csv")
#First, cleanup the ativos data,  I need to merge the data of the three first column, in order to have all blank
#spaces filled.
#Create a function for this
merge_columns <- function(df) {
df$X <- ifelse(df[, 1] != "", df[, 1], ifelse(df[, 2] != "", df[, 2], df[, 3]))
df <- df[, -c(2, 3)]
return(df)
}
ativos = merge_columns(ativos)
dre = merge_columns(dre)
passivo = merge_columns(passivo)
View(ativos)
View(dre)
View(passivo)
#Now that we have the data, we will build the dashboard
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar")),
)
),
dashboardBody(
tabItems(
tabItem(tabName = "2023", h2 = "Painel Gerencial",),
tabItem(tabName = "2024", h2 = "Painel Gerencial")
)
)
)
ui <- dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar"))
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "2023",
h2("2023 Content")),
# Second tab content
tabItem(tabName = "2024",
h2("2024 Content"))
)
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar")),
)
),
dashboardBody(
tabItems(
tabItem(tabName = "2023", h2("Painel Gerencial")),
tabItem(tabName = "2024", h2("Painel Gerencial"))
)
)
)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "2023", h2("Painel Gerencial")),
tabItem(tabName = "2024", h2("Painel Gerencial"))
)
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("shinyWidgets")
library(shinyWidgets)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(
sidebarMenu(
menuItem("2023", tabName = "2023", icon = icon("bank")),
menuItem("2024", tabName = "2024", icon = icon("file-invoice-dollar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "2023", h2("Painel Gerencial"),
pickerInput(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4),
multiple = TRUE
),
)),
tabItem(tabName = "2024", h2("Painel Gerencial"))
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(pickerInput(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4),
multiple = TRUE),
h2("Painel Gerencial")
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
pickerInput(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023, 2024"),
multiple = TRUE),
pickerInput(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4),
multiple = TRUE),
h2("Painel Gerencial")
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
pickerInput(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023, 2024"),
multiple = TRUE),
pickerInput(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4),
multiple = TRUE)),
h2("Painel Gerencial")
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
shinyWidgetsGallery()
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
checkboxGroupButtons(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023, 2024")),
checkboxGroupButtons(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4)),
h2("Painel Gerencial")
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
checkboxGroupButtons(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023", "2024")),
checkboxGroupButtons(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4)),
h2("Painel Gerencial")
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
checkboxGroupButtons(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023", "2024")),
checkboxGroupButtons(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4))),
h2("Painel Gerencial")
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
# First column (for year selection)
column(width = 6,
checkboxGroupButtons(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023", "2024"),
justified = TRUE)
),
# Second column (for quarter selection)
column(width = 6,
checkboxGroupButtons(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4),
justified = TRUE)
)
),
h2("Painel Gerencial")
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
# First column (for year selection)
column(width = 6,
checkboxGroupButtons(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023", "2024"),
justified = TRUE)
),
# Second column (for quarter selection)
column(width = 6,
checkboxGroupButtons(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4),
justified = TRUE)
)
),
h2("Painel Gerencial"),
fluidRow(
valueBox(
width = 3,
value = "R$ 1.000.000",
subtitle = "Receita Líquida",
icon = icon("dollar-sign"),
color = "blue"
),
)
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Dashboard ITUB4"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
# First column (for year selection)
column(width = 6,
checkboxGroupButtons(
inputId = "ano_picker",
label = "Selecione o ano:",
choices = c("2023", "2024"),
justified = TRUE)
),
# Second column (for quarter selection)
column(width = 6,
checkboxGroupButtons(
inputId = "trimestre_picker",
label = "Selecione o trimestre:",
choices = c(1, 2, 3, 4),
justified = TRUE)
)
),
h2("Painel Gerencial"),
fluidRow(
valueBox(
width = 3,
tags$p("R$ 1.000.000", style = "font-size: 75%;"),
subtitle = "Receita Líquida",
icon = icon("dollar-sign"),
color = "blue"
),
)
)
)
server = function(input, output) {
# Server logic can be added here if needed
}
# Run the application
shinyApp(ui = ui, server = server)
